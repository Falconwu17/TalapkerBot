package handlers

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"sync"
	"telegramBot/bot/internal/client"
	"telegramBot/bot/internal/keybord"
	"telegramBot/bot/internal/nlpclient"
)

type Bot struct {
	API     *tgbotapi.BotAPI
	Store   sync.Map
	History sync.Map
	APICl   *contentclient.Client
	NLP     *nlpclient.Client
}

func isMenuSelection(text string) bool {
	switch text {
	case "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
		"üìë –î–æ–∫—É–º–µ–Ω—Ç—ã",
		"üéÅ –ì—Ä–∞–Ω—Ç—ã",
		"üè† –û–±—â–µ–∂–∏—Ç–∏–µ",
		"üéì –ë—ñ–ª—ñ–º –±–µ—Ä—É –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã",
		"üìë “ö“±–∂–∞—Ç—Ç–∞—Ä",
		"üéÅ –ì—Ä–∞–Ω—Ç—Ç–∞—Ä",
		"üè† –ñ–∞—Ç–∞“õ—Ö–∞–Ω–∞":
		return true
	default:
		return false
	}
}

func (b *Bot) langOf(chatID int64) string {
	if v, ok := b.Store.Load(chatID); ok {
		if s, ok := v.(string); ok && (s == "ru" || s == "kz") {
			return s
		}
	}
	return "ru"
}
func (b *Bot) getHistory(chatID int64) []map[string]string {
	if v, ok := b.History.Load(chatID); ok {
		if h, ok := v.([]map[string]string); ok {
			return h
		}
	}
	return nil
}
func (b *Bot) pushUser(chatID int64, text string) {
	h := b.getHistory(chatID)
	h = append(h, map[string]string{"role": "user", "content": text})
	if len(h) > 8 {
		h = h[len(h)-8:]
	}
	b.History.Store(chatID, h)
}
func (b *Bot) pushAssistant(chatID int64, text string) {
	h := b.getHistory(chatID)
	h = append(h, map[string]string{"role": "assistant", "content": text})
	if len(h) > 8 {
		h = h[len(h)-8:]
	}
	b.History.Store(chatID, h)
}
func (b *Bot) HandleMessage(upd tgbotapi.Update) {
	if upd.Message == nil {
		return
	}
	chatID := upd.Message.Chat.ID
	text := upd.Message.Text

	switch text {
	case "/start":
		b.Store.Delete(chatID)
		b.History.Delete(chatID)
		msg := tgbotapi.NewMessage(chatID, "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
		msg.ReplyMarkup = keyboard.LangKeyboard()
		b.API.Send(msg)
		return
	case "/help":
		b.API.Send(tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª."))
		return
	case "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
		b.Store.Store(chatID, "ru")
		b.History.Delete(chatID)
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:")
		msg.ReplyMarkup = keyboard.Menu(keyboard.MenuRU)
		b.API.Send(msg)
		return
	case "üá∞üáø “ö–∞–∑–∞“õ—à–∞":
		b.Store.Store(chatID, "kz")
		b.History.Delete(chatID)
		msg := tgbotapi.NewMessage(chatID, "–ë”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:")
		msg.ReplyMarkup = keyboard.Menu(keyboard.MenuKZ)
		b.API.Send(msg)
		return
	}

	lang := b.langOf(chatID)

	if isMenuSelection(text) {
		switch text {
		// RU
		case "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
			b.sendFromAPI(chatID, "programs", lang)
			return
		case "üìë –î–æ–∫—É–º–µ–Ω—Ç—ã":
			b.sendFromAPI(chatID, "documents", lang)
			return
		case "üéÅ –ì—Ä–∞–Ω—Ç—ã":
			b.sendFromAPI(chatID, "grants", lang)
			return
		case "üè† –û–±—â–µ–∂–∏—Ç–∏–µ":
			b.sendFromAPI(chatID, "dorm", lang)
			return
		// KZ
		case "üéì –ë—ñ–ª—ñ–º –±–µ—Ä—É –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã":
			b.sendFromAPI(chatID, "programs", lang)
			return
		case "üìë “ö“±–∂–∞—Ç—Ç–∞—Ä":
			b.sendFromAPI(chatID, "documents", lang)
			return
		case "üéÅ –ì—Ä–∞–Ω—Ç—Ç–∞—Ä":
			b.sendFromAPI(chatID, "grants", lang)
			return
		case "üè† –ñ–∞—Ç–∞“õ—Ö–∞–Ω–∞":
			b.sendFromAPI(chatID, "dorm", lang)
			return
		}
	}

	if b.NLP != nil {
		if slug, conf, err := b.NLP.Classify(text); err == nil && conf >= 0.65 {
			if slug == "smalltalk" {
				b.pushUser(chatID, text)
				if ans, err := b.NLP.Chat(text, lang, b.getHistory(chatID)); err == nil && ans != "" {
					b.API.Send(tgbotapi.NewMessage(chatID, ans))
					b.pushAssistant(chatID, ans)
					return
				}
			} else if slug != "unknown" {
				b.sendFromAPI(chatID, slug, lang)
				return
			}
		}

		b.pushUser(chatID, text)
		if ans, err := b.NLP.Chat(text, lang, b.getHistory(chatID)); err == nil && ans != "" {
			b.API.Send(tgbotapi.NewMessage(chatID, ans))
			b.pushAssistant(chatID, ans)
			fmt.Println("NLP chat error:", err)
			return
		}
	}

	if lang == "kz" {
		b.API.Send(tgbotapi.NewMessage(chatID, "–°“±—Ä–∞“ì—ã“£–¥—ã —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º. –ú”ô–∑—ñ—Ä–¥–µ–Ω —Ç–∞“£–¥–∞ –Ω–µ–º–µ—Å–µ “õ—ã—Å“õ–∞—à–∞ –∂–∞–∑."))
	} else {
		b.API.Send(tgbotapi.NewMessage(chatID, "–ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫–æ—Ä–æ—á–µ."))
	}
}

func (b *Bot) sendFromAPI(chatID int64, slug, lang string) {
	c, err := b.APICl.Get(slug, lang)
	if err != nil {
		b.API.Send(tgbotapi.NewMessage(chatID, "–î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ –æ–±–Ω–æ–≤–∏–º."))
		return
	}
	b.API.Send(tgbotapi.NewMessage(chatID, c.Title+"\n\n"+c.Body))
}
