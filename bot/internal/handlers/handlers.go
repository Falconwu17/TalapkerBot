package handlers

import (
	"regexp"
	"strconv"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	contentclient "telegramBot/bot/internal/client"
	keyboard "telegramBot/bot/internal/keybord"
	"telegramBot/bot/internal/nlpclient"
)

const smalltalkWindow = 1
const classifyThreshold = 0.65

func stKey(chatID int64) string { return "st:" + strconv.FormatInt(chatID, 10) }

type Bot struct {
	API     *tgbotapi.BotAPI
	Store   sync.Map
	History sync.Map

	APICl *contentclient.Client
	NLP   *nlpclient.Client
}

func New(api *tgbotapi.BotAPI, apiCl *contentclient.Client, nlp *nlpclient.Client) *Bot {
	return &Bot{API: api, APICl: apiCl, NLP: nlp}
}

func (b *Bot) langOf(chatID int64) string {
	if v, ok := b.Store.Load(chatID); ok {
		if s, ok := v.(string); ok && (s == "ru" || s == "kz") {
			return s
		}
	}
	return "ru"
}

func (b *Bot) getHistory(chatID int64) []map[string]string {
	if v, ok := b.History.Load(chatID); ok {
		if h, ok := v.([]map[string]string); ok {
			return h
		}
	}
	return nil
}

func (b *Bot) pushUser(chatID int64, text string) {
	h := b.getHistory(chatID)
	h = append(h, map[string]string{"role": "user", "content": text})
	if len(h) > 8 {
		h = h[len(h)-8:]
	}
	b.History.Store(chatID, h)
}

func (b *Bot) pushAssistant(chatID int64, text string) {
	h := b.getHistory(chatID)
	h = append(h, map[string]string{"role": "assistant", "content": text})
	if len(h) > 8 {
		h = h[len(h)-8:]
	}
	b.History.Store(chatID, h)
}

func (b *Bot) enterSmalltalk(chatID int64) {
	b.Store.Store(stKey(chatID), smalltalkWindow)
}
func (b *Bot) inSmalltalk(chatID int64) bool {
	if v, ok := b.Store.Load(stKey(chatID)); ok {
		if n, ok := v.(int); ok && n > 0 {
			b.Store.Store(stKey(chatID), n-1)
			return true
		}
	}
	return false
}

var reHello = regexp.MustCompile(`(?i)\b(—Å–∞–ª–∞–º|—Å–∞–ª–µ–º|—Å”ô–ª–µ–º|–ø—Ä–∏–≤(?:–µ—Ç)?|–∑–¥–∞—Ä(?:–æ–≤–∞|–æ–≤)|—ç–π|–µ–π|—Ö–µ–π|hey|hi|hello|–∞—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º|–∞—Å—Å–∞–ª–∞–º|—Å”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ|—Å–∞–ª—è–º|—Å–∞–ª—è–º–∞–ª–µ–π–∫—É–º|–∑–¥–æ—Ä–æ–≤—á–µ–Ω–∫–æ)\b`)
var reHow = regexp.MustCompile(`(?i)\b(–∫–∞–∫\s*(—Ç—ã|–¥–µ–ª–∞|–ø–æ–∂–∏–≤–∞–µ—à—å)|—á—Ç–æ\s*–Ω–æ–≤–æ–≥–æ|—á—ë\s*–∫–∞–∫|—á–µ\s*–∫–∞–∫|“õ–∞–ª–∞–π—Å—ã“£|–∂–∞“ì–¥–∞–π|how'?s?\s*it\s*going|whats?'?s?\s*up)\b`)
var reBuddy = regexp.MustCompile(`(?i)\b(–¥—Ä—É–≥|–±—Ä–æ|–±—Ä–∞—Ç|–±—Ä–∞—Ç–∏–∫|–¥—Ä—É–∂–∏—â–µ|–∞–π|–±–∞—É—Ä|–±–∞—É—ã—Ä|—á–µ–ª)\b`)

func isSmalltalk(text string) bool {
	t := strings.TrimSpace(text)
	return reHello.MatchString(t) || reHow.MatchString(t) ||
		(reBuddy.MatchString(t) && (reHello.MatchString(t) || reHow.MatchString(t)))
}

var reFiller = regexp.MustCompile(`(?i)\b(–Ω—É|–≤–æ—Ç|—Ç–∏–ø–∞|–∫–æ—Ä–æ—á–µ|—Å–ª—É—à–∞–π|—Å–º–æ—Ç—Ä–∏|–≤–æ–æ–±—â–µ|–∫–∞–∫ –±—ã|–≤–æ–æ–±—â–µ–º|—à–æ|—á–µ|—á—ë|—ç—ç|–∞–∞|–µ–º–∞–µ|—ë–º–∞—ë|—ë–º–∞–µ|—á–µ–ª|–±—Ä–æ)\b`)

func normalizeForClassify(text string) string {
	t := strings.ToLower(strings.TrimSpace(text))
	t = reFiller.ReplaceAllString(t, " ")
	t = strings.Join(strings.Fields(t), " ")
	return t
}

var badOutRe = regexp.MustCompile(`(?i)(–∑–∞–¥|—Å–µ–∫—Å|—ç—Ä–æ—Ç|–ø–æ—Ä–Ω–æ|—Ç—Ä–∞—Ö|—Å–∏—Å—å|fuck|bitch)`)

func sanitizeAnswer(s string, lang string) string {
	s = strings.TrimSpace(s)
	s = strings.ReplaceAll(s, "Â∞ΩÂäõÂ∏Æ", "")
	s = strings.ReplaceAll(s, "Êúâ‰ªÄ‰πàÊàëÂèØ‰ª•ÂÅöÁöÑÂêó", "")
	s = strings.ReplaceAll(s, "mind relaxing", "")

	if badOutRe.MatchString(s) {
		if lang == "kz" {
			return "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, ”ô“£–≥—ñ–º–µ–Ω—ñ WKATU —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä—ã–Ω–∞ –±“±—Ä–∞–π—ã“õ: “õ–∞–±—ã–ª–¥–∞—É, –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä, –≥—Ä–∞–Ω—Ç—Ç–∞—Ä, –∂–∞—Ç–∞“õ—Ö–∞–Ω–∞. –ù–µ–¥–µ–Ω –±–∞—Å—Ç–∞–π–º—ã–∑?"
		}
		return "–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø–æ–ª–µ–∑–Ω–æ–º—É: WKATU ‚Äî –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥—Ä–∞–Ω—Ç—ã –∏–ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"
	}
	return s
}

//	func friendlyPrefixed(text, lang string) string {
//		if lang == "kz" {
//			return "–î–æ—Å—Ç—ã“õ “ª”ô–º “õ—ã—Å“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä. WKATU —Ç–∞“õ—ã—Ä—ã–±—ã–Ω–∞ (“õ–∞–±—ã–ª–¥–∞—É, –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä, –≥—Ä–∞–Ω—Ç—Ç–∞—Ä, –∂–∞—Ç–∞“õ—Ö–∞–Ω–∞) —Ñ–æ–∫—É—Å –∂–∞—Å–∞. –û—Ñ—Ñ—Ç–æ–ø –±–æ–ª—Å–∞, —Å—ã–ø–∞–π—ã —Ç“Ø—Ä–¥–µ ”ô“£–≥—ñ–º–µ–Ω–∏ WKATU-“ì–∞ –±“±—Ä. " + text
//		}
//		return "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ. –î–µ—Ä–∂–∏ —Ñ–æ–∫—É—Å –Ω–∞ WKATU (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥—Ä–∞–Ω—Ç—ã, –æ–±—â–µ–∂–∏—Ç–∏–µ). –ù–∞ –æ—Ñ—Ñ—Ç–æ–ø –æ—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Ç–µ–º–µ WKATU. " + text
//	}
func cannedSmalltalk(lang string) string {
	if lang == "kz" {
		return "–ñ–∞“õ—Å—ã! –ö”©–º–µ–∫—Ç–µ—Å—É–≥–µ –¥–∞–π—ã–Ω–º—ã–Ω. WKATU –±–æ–π—ã–Ω—à–∞ –Ω–µ “õ—ã–∑—ã“õ—Ç—ã: “õ–∞–±—ã–ª–¥–∞—É, –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä, –≥—Ä–∞–Ω—Ç—Ç–∞—Ä, –∂–∞—Ç–∞“õ—Ö–∞–Ω–∞?"
	}
	return "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ß—Ç–æ –ø–æ WKATU –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ: –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥—Ä–∞–Ω—Ç—ã, –æ–±—â–µ–∂–∏—Ç–∏–µ?"
}

func (b *Bot) HandleMessage(upd tgbotapi.Update) {
	if upd.Message == nil {
		return
	}
	chatID := upd.Message.Chat.ID
	text := upd.Message.Text

	switch text {
	case "/start":
		b.Store.Delete(chatID)
		b.Store.Delete(stKey(chatID))
		b.History.Delete(chatID)
		msg := tgbotapi.NewMessage(chatID, "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
		msg.ReplyMarkup = keyboard.LangKeyboard()
		b.API.Send(msg)
		return
	case "/help":
		b.API.Send(tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª."))
		return
	case "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
		b.Store.Store(chatID, "ru")
		b.Store.Delete(stKey(chatID))
		b.History.Delete(chatID)
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:")
		msg.ReplyMarkup = keyboard.Menu(keyboard.MenuRU)
		b.API.Send(msg)
		return
	case "üá∞üáø “ö–∞–∑–∞“õ—à–∞":
		b.Store.Store(chatID, "kz")
		b.Store.Delete(stKey(chatID))
		b.History.Delete(chatID)
		msg := tgbotapi.NewMessage(chatID, "–ë”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:")
		msg.ReplyMarkup = keyboard.Menu(keyboard.MenuKZ)
		b.API.Send(msg)
		return
	}

	lang := b.langOf(chatID)
	forceSmalltalk := b.inSmalltalk(chatID)

	switch text {
	case "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
		b.sendFromAPI(chatID, "programs", lang)
		return
	case "üìë –î–æ–∫—É–º–µ–Ω—Ç—ã":
		b.sendFromAPI(chatID, "documents", lang)
		return
	case "üéÅ –ì—Ä–∞–Ω—Ç—ã":
		b.sendFromAPI(chatID, "grants", lang)
		return
	case "üè† –û–±—â–µ–∂–∏—Ç–∏–µ":
		b.sendFromAPI(chatID, "dorm", lang)
		return

	case "–ü–æ—á–µ–º—É WKATU?", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ WKATU", "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ WKATU?", "–ê—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä—ã WKATU":
		b.sendFromAPI(chatID, "why-wkatu", lang)
		return
	case "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ WKATU", "–ö–ª—É–±—ã –∏ –∫—Ä—É–∂–∫–∏", "–°—Ç—É–¥–µ–Ω—Ç—Ç—ñ–∫ ”©–º—ñ—Ä":
		b.sendFromAPI(chatID, "campus", lang)
		return

	case "üéì –ë—ñ–ª—ñ–º –±–µ—Ä—É –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã":
		b.sendFromAPI(chatID, "programs", lang)
		return
	case "üìë “ö“±–∂–∞—Ç—Ç–∞—Ä":
		b.sendFromAPI(chatID, "documents", lang)
		return
	case "üéÅ –ì—Ä–∞–Ω—Ç—Ç–∞—Ä":
		b.sendFromAPI(chatID, "grants", lang)
		return
	case "üè† –ñ–∞—Ç–∞“õ—Ö–∞–Ω–∞":
		b.sendFromAPI(chatID, "dorm", lang)
		return
	}

	if (isSmalltalk(text) || forceSmalltalk) && b.NLP != nil {
		b.pushUser(chatID, text)
		if mini, llm, err := b.NLP.ChatPlus(text, lang, b.getHistory(chatID)); err == nil {
			if mini != nil && strings.TrimSpace(*mini) != "" {
				out := sanitizeAnswer(*mini, lang)
				b.API.Send(tgbotapi.NewMessage(chatID, out))
				b.pushAssistant(chatID, out)
				b.enterSmalltalk(chatID)
				return
			}
			if strings.TrimSpace(llm) == "" {
				llm = "–ü–æ–º–æ–≥—É –ø–æ WKATU: –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥—Ä–∞–Ω—Ç—ã, –æ–±—â–µ–∂–∏—Ç–∏–µ. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"
			}
			out := sanitizeAnswer(llm, lang)
			b.API.Send(tgbotapi.NewMessage(chatID, out))
			b.pushAssistant(chatID, out)
			b.enterSmalltalk(chatID)
			return
		}
		cs := cannedSmalltalk(lang)
		b.API.Send(tgbotapi.NewMessage(chatID, cs))
		b.pushAssistant(chatID, cs)
		b.enterSmalltalk(chatID)
		return
	}

	if b.NLP != nil {
		nt := normalizeForClassify(text)
		if slug, conf, err := b.NLP.Classify(nt); err == nil && slug == "smalltalk" && conf >= classifyThreshold {
			b.pushUser(chatID, text)
			if mini, llm, err := b.NLP.ChatPlus(text, lang, b.getHistory(chatID)); err == nil {
				if mini != nil && strings.TrimSpace(*mini) != "" {
					out := sanitizeAnswer(*mini, lang)
					b.API.Send(tgbotapi.NewMessage(chatID, out))
					b.pushAssistant(chatID, out)
					b.enterSmalltalk(chatID)
					return
				}
				if strings.TrimSpace(llm) == "" {
					llm = "–ü–æ–º–æ–≥—É –ø–æ WKATU: –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥—Ä–∞–Ω—Ç—ã, –æ–±—â–µ–∂–∏—Ç–∏–µ. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"
				}
				out := sanitizeAnswer(llm, lang)
				b.API.Send(tgbotapi.NewMessage(chatID, out))
				b.pushAssistant(chatID, out)
				b.enterSmalltalk(chatID)
				return
			}
		}

		b.pushUser(chatID, text)
		if mini, llm, err := b.NLP.ChatPlus(text, lang, b.getHistory(chatID)); err == nil {
			if mini != nil && strings.TrimSpace(*mini) != "" {
				out := sanitizeAnswer(*mini, lang)
				b.API.Send(tgbotapi.NewMessage(chatID, out))
				b.pushAssistant(chatID, out)
				return
			}
			if strings.TrimSpace(llm) == "" {
				llm = "–ü–æ–º–æ–≥—É –ø–æ WKATU: –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥—Ä–∞–Ω—Ç—ã, –æ–±—â–µ–∂–∏—Ç–∏–µ. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"
			}
			out := sanitizeAnswer(llm, lang)
			b.API.Send(tgbotapi.NewMessage(chatID, out))
			b.pushAssistant(chatID, out)
			return
		}
	}

	if lang == "kz" {
		b.API.Send(tgbotapi.NewMessage(chatID, "–¢“Ø—Å—ñ–Ω–±–µ–¥—ñ–º üôÇ WKATU –±–æ–π—ã–Ω—à–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω: “õ–∞–±—ã–ª–¥–∞—É, –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä, –≥—Ä–∞–Ω—Ç—Ç–∞—Ä, –∂–∞—Ç–∞“õ—Ö–∞–Ω–∞. “ö–∞–π—Å—ã—Å—ã “õ—ã–∑—ã“õ—Ç—ã?"))
	} else {
		b.API.Send(tgbotapi.NewMessage(chatID, "–ü–æ–Ω—è–ª –Ω–µ –≤—Å—ë üôÇ –ú–æ–≥—É –ø–æ–º–æ—á—å –ø–æ WKATU: –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥—Ä–∞–Ω—Ç—ã, –æ–±—â–µ–∂–∏—Ç–∏–µ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"))
	}
}

func (b *Bot) sendFromAPI(chatID int64, slug, lang string) {
	c, err := b.APICl.Get(slug, lang)
	if err != nil {
		b.API.Send(tgbotapi.NewMessage(chatID, "–î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ –æ–±–Ω–æ–≤–∏–º."))
		return
	}
	b.API.Send(tgbotapi.NewMessage(chatID, c.Title+"\n\n"+c.Body))
}
