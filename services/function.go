package services

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	"telegramBot/dbConn"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var menuRu = []string{"üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "üìë –î–æ–∫—É–º–µ–Ω—Ç—ã", "üéÅ –ì—Ä–∞–Ω—Ç—ã", "üè† –û–±—â–µ–∂–∏—Ç–∏–µ"}
var menuKz = []string{"üéì –ë—ñ–ª—ñ–º –±–µ—Ä—É –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã", "üìë “ö“±–∂–∞—Ç—Ç–∞—Ä", "üéÅ –ì—Ä–∞–Ω—Ç—Ç–∞—Ä", "üè† –ñ–∞—Ç–∞“õ—Ö–∞–Ω–∞"}

var lang = map[int64]string{}

func Bot() {
	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("–ë–æ—Ç @%s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	bot.Request(tgbotapi.NewSetMyCommands(
		tgbotapi.BotCommand{Command: "start", Description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
		tgbotapi.BotCommand{Command: "help", Description: "–ü–æ–º–æ—â—å"},
	))

	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
	defer stop()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for {
		select {
		case <-ctx.Done():
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
			return
		case upd := <-updates:
			if upd.Message == nil {
				continue
			}
			chatID := upd.Message.Chat.ID
			text := upd.Message.Text

			switch text {
			case "/start":
				lang[chatID] = ""
				msg := tgbotapi.NewMessage(chatID, "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
				msg.ReplyMarkup = languageKeyboard()
				bot.Send(msg)
				continue
			case "/help":
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ —Ä–∞–∑–¥–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É."))
				continue
			case "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
				lang[chatID] = "ru"
				msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:")
				msg.ReplyMarkup = menuKeyboard(menuRu)
				bot.Send(msg)
				continue
			case "üá∞üáø “ö–∞–∑–∞“õ—à–∞":
				lang[chatID] = "kz"
				msg := tgbotapi.NewMessage(chatID, "–ë”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:")
				msg.ReplyMarkup = menuKeyboard(menuKz)
				bot.Send(msg)
				continue
			}

			lng := chosenLang(chatID)

			// RU
			switch text {
			case "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
				sendFromDB(bot, chatID, "programs", lng)
				continue
			case "üìë –î–æ–∫—É–º–µ–Ω—Ç—ã":
				sendFromDB(bot, chatID, "documents", lng)
				continue
			case "üéÅ –ì—Ä–∞–Ω—Ç—ã":
				sendFromDB(bot, chatID, "grants", lng)
				continue
			case "üè† –û–±—â–µ–∂–∏—Ç–∏–µ":
				sendFromDB(bot, chatID, "dorm", lng)
				continue
			}
			// KZ
			switch text {
			case "üéì –ë—ñ–ª—ñ–º –±–µ—Ä—É –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã":
				sendFromDB(bot, chatID, "programs", lng)
				continue
			case "üìë “ö“±–∂–∞—Ç—Ç–∞—Ä":
				sendFromDB(bot, chatID, "documents", lng)
				continue
			case "üéÅ –ì—Ä–∞–Ω—Ç—Ç–∞—Ä":
				sendFromDB(bot, chatID, "grants", lng)
				continue
			case "üè† –ñ–∞—Ç–∞“õ—Ö–∞–Ω–∞":
				sendFromDB(bot, chatID, "dorm", lng)
				continue
			}

			if lng == "kz" {
				bot.Send(tgbotapi.NewMessage(chatID, "–°“±—Ä–∞“ì—ã“£–¥—ã —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º. –ú”ô–∑—ñ—Ä–¥–µ–Ω —Ç–∞“£–¥–∞ –Ω–µ–º–µ—Å–µ “õ—ã—Å“õ–∞—à–∞ –∂–∞–∑."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫–æ—Ä–æ—á–µ."))
			}
		}
	}
}

func chosenLang(chatID int64) string {
	if l, ok := lang[chatID]; ok && (l == "ru" || l == "kz") {
		return l
	}
	return "ru"
}

func sendFromDB(bot *tgbotapi.BotAPI, chatID int64, slug, lng string) {
	title, body, err := dbConn.Fetch(slug, lng)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "–î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ –æ–±–Ω–æ–≤–∏–º."))
		return
	}
	bot.Send(tgbotapi.NewMessage(chatID, title+"\n\n"+body))
}

func languageKeyboard() tgbotapi.ReplyKeyboardMarkup {
	btns := [][]tgbotapi.KeyboardButton{
		{tgbotapi.NewKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞"), tgbotapi.NewKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")},
	}
	kb := tgbotapi.NewReplyKeyboard(btns...)
	kb.ResizeKeyboard = true
	return kb
}

func menuKeyboard(items []string) tgbotapi.ReplyKeyboardMarkup {
	var rows [][]tgbotapi.KeyboardButton
	for _, label := range items {
		rows = append(rows, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(label)))
	}
	kb := tgbotapi.NewReplyKeyboard(rows...)
	kb.ResizeKeyboard = true
	return kb
}
